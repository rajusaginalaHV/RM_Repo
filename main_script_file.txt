// script for Data Model & BI Report migration
def passwordHandler(String input) {
   StringBuilder result = new StringBuilder()
		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == '%') {
				result.append('%')
            }
			result.append(input.charAt(i))
		}
        return result.toString()
}
def Update_details(instance_selected){
	if(instance_selected.equals("UAT")){
		env.USR = env.ERZP_CREDS_USR
		env.PSW = env.ERZP_CREDS_PSW
		env.serviceUrl = env.UAT
	}
	else if(instance_selected.equals("PROD")){
		env.USR = env.ESLL_CREDS_USR
		env.PSW = env.ESLL_CREDS_PSW
		env.serviceUrl = env.ESLL_URL
	}
	else if(instance_selected.equals("DEV")){
		env.USR = env.ETIT_CREDS_USR
		env.PSW = env.ETIT_CREDS_PSW
		env.serviceUrl = env.DEV
	}
}

pipeline {
    agent any
    environment {
        ERZP_CREDS = credentials('fa-erzp-credentials')
		ESLL_CREDS = credentials('fa-esll-credentials')
		ETIT_CREDS = credentials('fa-etit-credentials')
    }
    stages {
		stage('Build') {
			when{
				expression {GitRelease.contains('Yes')}
			}
            steps {
                script {
                    // Define the Git repository URL
                    def gitRepoUrl = 'https://github.com/rajusaginalaHV/RM_Repo.git'

                    // Get the selected release version from the user parameter
                    def selectedRelease = "${params.RELEASE_VERSION}"
					
					echo 'Release selection worked!'
                    
					// Clone the repository to a temporary directory and checkout the selected release tag
                    def gitCloneDir = checkout([$class: 'GitSCM', branches: [[name: selectedRelease]],userRemoteConfigs: [[url: gitRepoUrl]]])
                }
            }
		}
        stage('Generate payload') {
            steps {
                script {
					// sets up environment variables
                    Update_details((params.Target_Instance).toString())
					env.pwd = (env.PSW).toString()
                    env.hasPercentage = (pwd).contains('%')
					// to handle escape characters in password
					if (hasPercentage) {
						env.PASSWORD1=passwordHandler(pwd)
					}
					def choices = params.Choice.split(",")
					if(choices.contains('BI Report')){
						env.BI_Report = true
					}
					if(choices.contains('Data Model')){
						env.DataModel = true
					}
				}
			}
		}
		stage('Data_Model'){
			when{
				expression {env.DataModel}
			}
			steps{
				
				script{
					def DMPATHTODEPLOY=''
					def DMactualreportname=''
					def DMreportObjectAbsolutePath=''
					def DMsoapRequest=''
					
					DMPATHTODEPLOY=(params.Data_Model_PATHTODEPLOY).toString()+"/"+(params.DataModel_NAME).toString().replace(".xdmz","")
					
					try{
						bat " java EncodeToBase64  ${DataModel_NAME} DMPayload.xml ${DMPATHTODEPLOY} ${env.USR} \"${env.PASSWORD1}\" xdmz"
					
						DMactualreportname = (params.DataModel_NAME).replace(".xdmz",".xdm")
						
						DMreportObjectAbsolutePath=((params.Data_Model_PATHTODEPLOY)+"/"+(DMactualreportname))
						
						DMsoapRequest = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v2=\"http://xmlns.oracle.com/oxp/service/v2\"> \r\n <soapenv:Header/> \r\n <soapenv:Body> \r\n <v2:objectExist> \r\n <v2:reportObjectAbsolutePath>" + DMreportObjectAbsolutePath + "</v2:reportObjectAbsolutePath> \r\n <v2:userID>" + env.USR + "</v2:userID> \r\n <v2:password>" + env.pwd + "</v2:password> \r\n </v2:objectExist> \r\n </soapenv:Body> \r\n </soapenv:Envelope>"
						
						writeFile file: 'DM_object_exist_soap_request.xml', text: DMsoapRequest
						
						// Execute the SOAP web service call using curl	
						def objectexist_command = "curl --silent --header 'Content-Type: text/xml' --data @DM_object_exist_soap_request.xml ${env.serviceUrl}"
						try{
							def DMobject_exist_soap_response = bat(returnStdout: true, script: objectexist_command)
						
						
							writeFile file: 'DMobject_exist_soap_response.xml', text: DMobject_exist_soap_response
							
							if(DMobject_exist_soap_response.contains("<objectExistReturn>true</objectExistReturn>")){
								echo "Data Model Exists \n Deleting Data Model"
								def DMsoapRequest2 = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v2=\"http://xmlns.oracle.com/oxp/service/v2\"> \r\n <soapenv:Header/> \r\n <soapenv:Body> \r\n <v2:deleteObject> \r\n <v2:objectAbsolutePath>" + DMreportObjectAbsolutePath + "</v2:objectAbsolutePath> \r\n <v2:userID>" + env.USR + "</v2:userID> \r\n <v2:password>" + env.pwd + "</v2:password> \r\n </v2:deleteObject> \r\n </soapenv:Body> \r\n </soapenv:Envelope>"
		
								
								// Write the SOAP request to a file
								
								writeFile file: 'DMdeleteObject_SoapRequest.xml', text: DMsoapRequest2
								
								
								
								// Execute the SOAP web service call using curl
								def DMdeleteObjectcommand = "curl --silent --header 'Content-Type: text/xml' --data @DMdeleteObject_SoapRequest.xml ${env.serviceUrl}"
								
								try{
									def DMdeleteObject_soap_response = bat(returnStdout: true, script: DMdeleteObjectcommand)
									
									if(DMdeleteObject_soap_response.contains("<deleteObjectReturn>true</deleteObjectReturn>")){
										println "Data Model Deleted"
									}
									
									// save deleteObject soap response
									
									writeFile file: 'DMdeleteObject_soap_response.xml', text: DMdeleteObject_soap_response
								}
								catch(Exception e){
									error("Error during DMdeleteObjectcommand: ${e.getMessage()}");
									return
								}	
							}
							else{
								echo "Data Model doesn't exist \n Uploading Data Model"
							}
							try{
								DM_status_code = bat(returnStdout: true, script: "curl --output DMoutput.gzip -w \"%%{http_code}\" --silent --header \"Content-Type:application/xml\" -d @DMPayload.xml ${env.serviceUrl}").trim().split("\n")[1]
			
								echo "HTTP response status code: ${DM_status_code}"
			
								if(DM_status_code == "200"){
									echo "Data Model uploaded successfully!"
								}
								else{
									echo "Data Model uplaod failed. Check DMoutput.gzip for error"
								}
							}
							catch(Exception e){
								error("Error during DMUpload bat command: ${e.getMessage()}");
								return
							}
						}
						catch(Exception e){
							error("Error during objectexist_command: ${e.getMessage()}");
							return
						}
					}
					catch(Exception e){
						error("Error during execution of java bat command: ${e.getMessage()}");
						return
					}
				}
			}
		}
		stage('BI_Report'){
			when{
				expression {env.BI_Report}
			}
			steps{
				script{
					def BIPATHTODEPLOY=''
					def BIactualreportname=''
					def BIreportObjectAbsolutePath=''
					def BIsoapRequest=''
					
					BIPATHTODEPLOY=(params.BI_PATHTODEPLOY).toString()+"/"+(params.BI_NAME).toString().replace(".xdoz","")
					try{
						bat " java EncodeToBase64  ${BI_NAME} BIPayload.xml ${BIPATHTODEPLOY} ${env.USR} \"${env.PASSWORD1}\" xdoz"
						BIactualreportname = (params.BI_NAME).replace(".xdoz",".xdo")
						BIreportObjectAbsolutePath=((params.BI_PATHTODEPLOY)+"/"+(BIactualreportname))
						BIsoapRequest = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v2=\"http://xmlns.oracle.com/oxp/service/v2\"> \r\n <soapenv:Header/> \r\n <soapenv:Body> \r\n <v2:objectExist> \r\n <v2:reportObjectAbsolutePath>" + BIreportObjectAbsolutePath + "</v2:reportObjectAbsolutePath> \r\n <v2:userID>" + env.USR + "</v2:userID> \r\n <v2:password>" + env.pwd + "</v2:password> \r\n </v2:objectExist> \r\n </soapenv:Body> \r\n </soapenv:Envelope>"
						writeFile file: 'BI_object_exist_soap_request.xml', text: BIsoapRequest
						
						// Execute the SOAP web service call using curl	
						def objectexist_command = "curl --silent --header 'Content-Type: text/xml' --data @BI_object_exist_soap_request.xml ${env.serviceUrl}"
						try{
							def BIobject_exist_soap_response = bat(returnStdout: true, script: objectexist_command)
							writeFile file: 'BIobject_exist_soap_response.xml', text: BIobject_exist_soap_response
							
							if(BIobject_exist_soap_response.contains("<objectExistReturn>true</objectExistReturn>")){
								echo "BI Report Exists \n Deleting BI Report"
								def BIsoapRequest2 = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v2=\"http://xmlns.oracle.com/oxp/service/v2\"> \r\n <soapenv:Header/> \r\n <soapenv:Body> \r\n <v2:deleteObject> \r\n <v2:objectAbsolutePath>" + BIreportObjectAbsolutePath + "</v2:objectAbsolutePath> \r\n <v2:userID>" + env.USR + "</v2:userID> \r\n <v2:password>" + env.pwd + "</v2:password> \r\n </v2:deleteObject> \r\n </soapenv:Body> \r\n </soapenv:Envelope>"
			
								
								// Write the SOAP request to a file
								
								writeFile file: 'BIdeleteObject_SoapRequest.xml', text: BIsoapRequest2
								
								
								
								// Execute the SOAP web service call using curl
								def BIdeleteObjectcommand = "curl --silent --header 'Content-Type: text/xml' --data @BIdeleteObject_SoapRequest.xml ${env.serviceUrl}"
								try{
									def BIdeleteObject_soap_response = bat(returnStdout: true, script: BIdeleteObjectcommand)

									if(BIdeleteObject_soap_response.contains("<deleteObjectReturn>true</deleteObjectReturn>")){
										println "BI Report Deleted"
									}
									
									// save deleteObject soap response
									
									writeFile file: 'BIdeleteObject_soap_response.xml', text: BIdeleteObject_soap_response
								}
								catch(Exception e){
									error("Error during BIdeleteObjectcommand: ${e.getMessage()}");
									return
								}
							}
							else{
								echo "BI Report doesn't exist \n Uploading BI Report"
							}
							try{
								BI_status_code = bat(returnStdout: true, script: "curl --output BIoutput.gzip -w \"%%{http_code}\" --silent --header \"Content-Type:application/xml\" -d @BIPayload.xml ${env.serviceUrl}").trim().split("\n")[1]
				
								echo "HTTP response status code: ${BI_status_code}"
				
								if(BI_status_code == "200"){
									echo "BI Report uploaded successfully!"
								}
								else{
									echo "BI Report uplaod failed. Check BIoutput.gzip for error"
								}
							}
							catch(Exception e){
								error("Error during BIUpload bat command: ${e.getMessage()}");
								return
							}
						}
						catch(Exception e){
						if(error()){
									error("Some error");
								}
							error("Error during objectexist_command : ${e.getMessage()}");
							return
						}
					}
					catch(Exception e){
						error("Error during execution of java bat command: ${e.getMessage()}");
						return
					}
				}
				
			}
		}
    }
}
